<?php

namespace StonFi\Tests\contracts\dex\v2;

use Brick\Math\BigInteger;
use Olifanton\Interop\Address;
use Olifanton\Interop\Boc\Cell;
use Olifanton\Interop\Bytes;
use StonFi\const\v2\gas\pool\BurnGas;
use StonFi\const\v2\gas\pool\CollectFeeGas;
use StonFi\contracts\common\CallContractMethods;
use StonFi\contracts\dex\v2\PoolV2;
use PHPUnit\Framework\TestCase;
use StonFi\contracts\dex\v2\ProvideLiquidityV2;
use StonFi\enums\Networks;
use StonFi\Init;

const POOL_ADDRESS = "EQDi0bJhkvB86vEK7mjaa508xwSB4mnk8zXLdmb0AtsO4iG7"; // STON/GEMSTON pool
const USER_WALLET_ADDRESS = "UQAQnxLqlX2B6w4jQzzzPWA8eyWZVZBz6Y0D_8noARLOaEAn";

class PoolV2Test extends TestCase
{
    public Init $init;
    public PoolV2 $pool;

    protected function setUp(): void
    {
        $this->init = new Init(Networks::MAINNET);
        $this->pool = new PoolV2($this->init, new Address(POOL_ADDRESS));
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function testGas()
    {
        $this->assertEquals(("800000000"), (new BurnGas())->gasAmount);
        $this->assertEquals(("400000000"), (new CollectFeeGas())->gasAmount);
    }

    public function testCreateCollectFeesBody()
    {
        //Test 1
        $res = $this->pool->createCollectFeeBody();
        $this->assertEquals("te6cckEBAQEADgAAGB/LfT0AAAAAAAAAAOHc0mQ=", Bytes::bytesToBase64($res->toBoc(false)));

        // Test 2 - should build expected tx body when queryId is defined
        $res = $this->pool->createCollectFeeBody(12345);
        $this->assertEquals("te6cckEBAQEADgAAGB/LfT0AAAAAAAAwOR9czWw=", Bytes::bytesToBase64($res->toBoc(false)));
    }


    public function testGetCollectFeeTxParams()
    {
        // TEST 1
        $result = $this->pool->getCollectFeeTxParams();
        $this->assertTrue(
            $result->address->isEqual(new Address("EQDi0bJhkvB86vEK7mjaa508xwSB4mnk8zXLdmb0AtsO4iG7")),
        );
        $this->assertEquals(
            "te6cckEBAQEADgAAGB/LfT0AAAAAAAAAAOHc0mQ=",
            $result->payload
        );
        $this->assertEquals(
            BigInteger::of(400000000),
            $result->value
        );

        // TEST 2
        $result = $this->pool->getCollectFeeTxParams(queryId: 12345);
        $this->assertTrue(
            $result->address->isEqual(new Address("EQDi0bJhkvB86vEK7mjaa508xwSB4mnk8zXLdmb0AtsO4iG7")),
        );
        $this->assertEquals(
            "te6cckEBAQEADgAAGB/LfT0AAAAAAAAwOR9czWw=",
            $result->payload
        );
        $this->assertEquals(
            BigInteger::of(400000000),
            $result->value
        );

        // TEST 3
        $result = $this->pool->getCollectFeeTxParams(gasAmount: BigInteger::of(1));
        $this->assertTrue(
            $result->address->isEqual(new Address("EQDi0bJhkvB86vEK7mjaa508xwSB4mnk8zXLdmb0AtsO4iG7")),
        );
        $this->assertEquals(
            "te6cckEBAQEADgAAGB/LfT0AAAAAAAAAAOHc0mQ=",
            $result->payload
        );
        $this->assertEquals(
            BigInteger::of(1),
            $result->value
        );
    }

    public function testCreateBurnBody()
    {
        $amount = BigInteger::of(1000000000);
        $responseAddress = new Address(USER_WALLET_ADDRESS);

        // TEST 1
        $result = $this->pool->createBurnBody(amount: $amount);
        $this->assertEquals(
            "te6cckEBAQEAEwAAIVlfB7wAAAAAAAAAAEO5rKABu8koZQ==",
            Bytes::bytesToBase64($result->toBoc(false))
        );


        // TEST 2
        $result = $this->pool->createBurnBody(amount: $amount, queryId: 12345);
        $this->assertEquals(
            "te6cckEBAQEAEwAAIVlfB7wAAAAAAAAwOUO5rKABFeXmDg==",
            Bytes::bytesToBase64($result->toBoc(false))
        );
    }

    public function testGetBurnTxParams()
    {
        $amount = BigInteger::of(1000000000);
        $userWalletAddress = new Address(USER_WALLET_ADDRESS);

        $mock = $this->createMock(CallContractMethods::class);
        $mock->expects($this->any())
            ->method("getWalletAddress")
            ->willReturnCallback(function ($arg0, $arg1) {
                if ((new Address($arg0))->isEqual(new Address(POOL_ADDRESS)))
                    return Cell::oneFromBoc("te6ccsEBAQEAJAAAAEOACstDZ3ATHWF//MUN1iK/rfVwlHFuhUxxdp3sB2jMtipQs2Cj5Q==", true)->beginParse()->loadAddress();
                throw new \Exception("Inputs are wrong");
            });

        $this->pool = new PoolV2($this->init, new Address(POOL_ADDRESS), provider: $mock);


        // TEST 1 - should build expected tx params
        $result = $this->pool->getBurnTxParams(
            $amount,
            $userWalletAddress
        );
        $this->assertEquals(
            $result->address->isEqual(new Address("EQBWWhs7gJjrC__mKG6xFf1vq4Sji3QqY4u072A7RmWxUoT1")),
            true
        );
        $this->assertEquals(
            "te6cckEBAQEAEwAAIVlfB7wAAAAAAAAAAEO5rKABu8koZQ==",
            $result->payload
        );
        $this->assertEquals(
            BigInteger::of(800000000),
            $result->value
        );

        // TEST 2 - should build expected tx params when queryId is defined
        $result = $this->pool->getBurnTxParams(
            $amount,
            $userWalletAddress,
            queryId: 12345
        );
        $this->assertEquals(
            $result->address->isEqual(new Address("EQBWWhs7gJjrC__mKG6xFf1vq4Sji3QqY4u072A7RmWxUoT1")),
            true
        );
        $this->assertEquals(
            "te6cckEBAQEAEwAAIVlfB7wAAAAAAAAwOUO5rKABFeXmDg==",
            $result->payload
        );
        $this->assertEquals(
            BigInteger::of(800000000),
            $result->value
        );

        // TEST 3 - should build expected tx params when custom gasAmount is defined
        $result = $this->pool->getBurnTxParams(
            $amount,
            $userWalletAddress,
            gasAmount: BigInteger::of(1)
        );
        $this->assertEquals(
            $result->address->isEqual(new Address("EQBWWhs7gJjrC__mKG6xFf1vq4Sji3QqY4u072A7RmWxUoT1")),
            true
        );
        $this->assertEquals(
            "te6cckEBAQEAEwAAIVlfB7wAAAAAAAAAAEO5rKABu8koZQ==",
            $result->payload
        );
        $this->assertEquals(
            BigInteger::of(1),
            $result->value
        );
    }

    public function testGetLpAccountAddress()
    {
        $ownerAddress = new Address(USER_WALLET_ADDRESS);
        $mock = $this->createMock(CallContractMethods::class);
        $mock->expects($this->any())
            ->method("runMethod")
            ->willReturnCallback(function ($contractAddress, $method, $arg2) {
                return json_encode([
                    'success' => true,
                    'stack' => [
                        [
                            'type' => 'slice',
                            'slice' => Bytes::bytesToHexString(Bytes::base64ToBytes("te6cckEBAQEAJAAAQ4AAB5/Ovamu/bOPeMhsGc3XW0I0uNxe2kUSAaNuD00KyZBJLKC6"))
                        ],
                    ]
                ]);
            });

        // TEST 1
        $this->pool = new PoolV2($this->init, new Address(POOL_ADDRESS), provider: $mock);
        $res = $this->pool->getLpAccountAddress(
            $ownerAddress->toString()
        );
        $this->assertTrue($res->isEqual(new Address("EQAAPP517U137Zx7xkNgzm662hGlxuL20iiQDRtwemhWTPLx")));
    }

    public function testGetPoolData()
    {
        $mock = $this->createMock(CallContractMethods::class);
        $mock->expects($this->any())
            ->method("runMethod")
            ->willReturnCallback(function ($contractAddress, $method, $arg2) {
                return json_encode([
                    'success' => true,
                    'stack' => [
                        [
                            'type' => 'num',
                            'num' => dechex('0')
                        ],
                        [
                            'type' => 'cell',
                            'cell' => Bytes::bytesToHexString(Bytes::base64ToBytes("te6cckEBAQEAJAAAQ4ATVm1Pu/oiWS5n4OYpObhD24wfKWlrcZIcfQgKs/yR9hAq9P4f"))
                        ],
                        [
                            'type' => 'num',
                            'num' => dechex('4986244178')
                        ],
                        [
                            'type' => 'num',
                            'num' => dechex('4408450497')
                        ],
                        [
                            'type' => 'num',
                            'num' => dechex('5646981229')
                        ],
                        [
                            'type' => 'cell',
                            'cell' => Bytes::bytesToHexString(Bytes::base64ToBytes("te6cckEBAQEAJAAAQ4AFImSaUo+dFf1OYl8dtYp9Zj6M0s4JKV4Dgg9WfZm54vCRWjIN"))
                        ],
                        [
                            'type' => 'cell',
                            'cell' => Bytes::bytesToHexString(Bytes::base64ToBytes("te6cckEBAQEAJAAAQ4ATmaZ7TLWAsPlzzyZBHUychwiCFGUXrTsOROB1sQcwtxDOko/O"))
                        ],
                        [
                            'type' => 'num',
                            'num' => dechex('20')
                        ],
                        [
                            'type' => 'num',
                            'num' => dechex('10')
                        ],
                        [
                            'type' => 'cell',
                            'cell' => Bytes::bytesToHexString(Bytes::base64ToBytes("te6cckEBAQEAAwAAASCUQYZV"))
                        ],
                        [
                            'type' => 'num',
                            'num' => dechex('2519317')
                        ],
                        [
                            'type' => 'num',
                            'num' => dechex('514527')
                        ],
                    ]
                ]);
            });

        $this->pool = new PoolV2($this->init, new Address(POOL_ADDRESS), provider: $mock);

        // TEST 1
        $result = $this->pool->getPoolData();
        $this->assertEquals(
            (false),
            $result->isLocked
        );
        $this->assertEquals(
            "EQCas2p939ESyXM_BzFJzcIe3GD5S0tbjJDj6EBVn-SPsPKH",
            $result->routerAddress->toString(true, true, true)
        );
        $this->assertEquals(
            "4986244178",
            $result->totalSupplyLP
        );
        $this->assertEquals(
            BigInteger::of('4408450497'),
            $result->reserve0
        );
        $this->assertEquals(
            BigInteger::of('5646981229'),
            $result->reserve1
        );
        $this->assertTrue(
            $result->token0WalletAddress->isEqual(new Address("EQApEyTSlHzor-pzEvjtrFPrMfRmlnBJSvAcEHqz7M3PF3Tb")),
        );
        $this->assertTrue(
            $result->token1WalletAddress->isEqual(new Address("EQCczTPaZawFh8ueeTII6mTkOEQQoyi9adhyJwOtiDmFuB9j")),
        );
        $this->assertEquals(
            BigInteger::of('20'),
            $result->lpFee
        );
        $this->assertEquals(
            BigInteger::of('10'),
            $result->protocolFee
        );
        $this->assertNull(
            $result->protocolFeeAddress,
        );
        $this->assertEquals(
            BigInteger::of('2519317'),
            $result->collectedToken0ProtocolFee
        );
        $this->assertEquals(
            BigInteger::of('514527'),
            $result->collectedToken1ProtocolFee
        );
    }
}
