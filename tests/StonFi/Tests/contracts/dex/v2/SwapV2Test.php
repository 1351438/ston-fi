<?php

namespace StonFi\Tests\contracts\dex;

use Brick\Math\BigInteger;
use Olifanton\Interop\Address;
use Olifanton\Interop\Boc\Cell;
use Olifanton\Interop\Bytes;
use StonFi\const\v2\gas\provide\LpJettonGas;
use StonFi\const\v2\gas\provide\LpTonGas;
use StonFi\const\v2\gas\swap\JettonToJettonGas;
use StonFi\const\v2\gas\swap\JettonToTonGas;
use StonFi\const\v2\gas\swap\TonToJettonGas;
use StonFi\contracts\common\CallContractMethods;
use StonFi\contracts\dex\v2\SwapV2;
use PHPUnit\Framework\TestCase;
use StonFi\enums\Networks;
use StonFi\Init;
use StonFi\pTON\pTON;
use StonFi\pTON\v1\PtonV1;

const USER_WALLET_ADDRESS = "UQAQnxLqlX2B6w4jQzzzPWA8eyWZVZBz6Y0D_8noARLOaEAn";
const ROUTER_ADDRESS = "kQCas2p939ESyXM_BzFJzcIe3GD5S0tbjJDj6EBVn-SPsEkN";
const OFFER_JETTON_ADDRESS = "kQDLvsZol3juZyOAVG8tWsJntOxeEZWEaWCbbSjYakQpuYN5"; // TestRED
const ASK_JETTON_ADDRESS = "kQB_TOJSB7q3-Jm1O8s0jKFtqLElZDPjATs5uJGsujcjznq3"; // TestBLUE

class SwapV2Test extends TestCase
{
    private Init $init;
    private SwapV2 $swap;
    private pTON $proxyTon;

    private function generateProviderMock()
    {
        $mock = $this->createMock(CallContractMethods::class);
        $mock->expects($this->any())
            ->method("getWalletAddress")
            ->willReturnCallback(function ($userAddr, $jettonAddr) {
                if ((new Address($jettonAddr))->isEqual(new Address(OFFER_JETTON_ADDRESS)))
                    return Cell::oneFromBoc("te6ccsEBAQEAJAAAAEOACD+9EGh6wT/2pEbZWrfCmVbsdpQVGU9308qh2gel9QwQM97q5A==", true)->beginParse()->loadAddress();

                if ((new Address($jettonAddr))->isEqual(new Address(ASK_JETTON_ADDRESS)))
                    return Cell::oneFromBoc("te6ccsEBAQEAJAAAAEOAAQDOYNkjxevc0Ludmj5oWQzsz/S9vn9/b/V0DLdsOUWw40LsPA==", true)->beginParse()->loadAddress();

                if ((new Address($jettonAddr))->isEqual($this->proxyTon->address))
                    return Cell::oneFromBoc("te6ccsEBAQEAJAAAAEOAAioWoxZMTVqjEz8xEP8QSW4AyorIq+/8UCfgJNM0gMPwJB4oTQ==", true)->beginParse()->loadAddress();

                throw new \Exception("Unexpected call: $userAddr");
            });
        return $mock;
    }

    protected function setUp(): void
    {
        $this->init = new Init(Networks::MAINNET);
        $this->init->setRouter(new Address(ROUTER_ADDRESS));
        $this->proxyTon = new PtonV1($this->init, ('kQAcOvXSnnOhCdLYc6up2ECYwtNNTzlmOlidBeCs5cFPV7AM'));

        $this->swap = new SwapV2($this->init);

        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function testGas()
    {
        $this->assertEquals("300000000", (new LpJettonGas())->gasAmount, 'LpJettonGas');
        $this->assertEquals("235000000", (new LpJettonGas())->forwardGasAmount, 'LpTonGas');
        $this->assertEquals("300000000", (new LpTonGas())->forwardGasAmount, 'LpTonGas');
        $this->assertEquals("240000000", (new JettonToJettonGas())->forwardGasAmount, 'JettonToJettonGas');
        $this->assertEquals("300000000", (new JettonToJettonGas())->gasAmount, 'JettonToJettonGas');
        $this->assertEquals("240000000", (new JettonToTonGas())->forwardGasAmount, 'JettonToTonGas');
        $this->assertEquals("300000000", (new JettonToTonGas())->gasAmount, 'JettonToTonGas');
        $this->assertEquals("300000000", (new TonToJettonGas())->forwardGasAmount, 'TonToJettonGas');
    }

    public function testCreateSwapBody()
    {
        $receiverAddress = new Address(USER_WALLET_ADDRESS);
        $refundAddress = new Address(USER_WALLET_ADDRESS);
        $askJettonWalletAddress = new Address(ASK_JETTON_ADDRESS);
        $minAskAmount = BigInteger::of(900000000);

        //TEST 1
        $result = $this->swap->createSwapBody(
            $askJettonWalletAddress,
            $receiverAddress,
            $refundAddress,
            $minAskAmount
        );

        $this->assertEquals("te6cckEBAgEAmAAB0SWThWGAD+mcSkD3Vv8TNqd5ZpGULbUWJKyGfGAnZzcSNZdG5HnQAEJ8S6pV9gesOI0M88z1gPHslmVWQc+mNA//J6AESzmiAAhPiXVKvsD1hxGhnnmesB49ksyqyDn0xoH/5PQAiWc0QAEAU0NaTpAIACE+JdUq+wPWHEaGeeZ6wHj2SzKrIOfTGgf/k9ACJZzQAAAFEEo68v0=",
            Bytes::bytesToBase64($result->toBoc(false))
        );

        //TEST 2
        $result = $this->swap->createSwapBody(
            $askJettonWalletAddress,
            $receiverAddress,
            $refundAddress,
            $minAskAmount,
            referralAddress: $refundAddress
        );

        $this->assertEquals("te6cckEBAgEAuQAB0SWThWGAD+mcSkD3Vv8TNqd5ZpGULbUWJKyGfGAnZzcSNZdG5HnQAEJ8S6pV9gesOI0M88z1gPHslmVWQc+mNA//J6AESzmiAAhPiXVKvsD1hxGhnnmesB49ksyqyDn0xoH/5PQAiWc0QAEAlUNaTpAIACE+JdUq+wPWHEaGeeZ6wHj2SzKrIOfTGgf/k9ACJZzQAAAFQAEJ8S6pV9gesOI0M88z1gPHslmVWQc+mNA//J6AESzmiFTdty8=",
            Bytes::bytesToBase64($result->toBoc(false))
        );

        // TEST 3
        $this->expectException(\Exception::class);
        $result = $this->swap->createSwapBody(
            $askJettonWalletAddress,
            $receiverAddress,
            $refundAddress,
            $minAskAmount,
            referralValue: BigInteger::of(200)
        );

        // TEST 4
        $this->expectException(\Exception::class);
        $result = $this->swap->createSwapBody(
            $askJettonWalletAddress,
            $receiverAddress,
            $refundAddress,
            $minAskAmount,
            referralValue: BigInteger::of(-1)
        );
    }

    public function testCreateCrossSwapBody()
    {
        $receiverAddress = new Address(USER_WALLET_ADDRESS);
        $refundAddress = new Address(USER_WALLET_ADDRESS);
        $askJettonWalletAddress = new Address(ASK_JETTON_ADDRESS);
        $minAskAmount = BigInteger::of(900000000);

        /// TEST 1 - "should build expected tx body"
        $result = $this->swap->createCrossSwapBody(
            $askJettonWalletAddress,
            $receiverAddress,
            $minAskAmount,
            $refundAddress,
        );
        $this->assertEquals(
            "te6cckEBAgEAmAAB0f///++AD+mcSkD3Vv8TNqd5ZpGULbUWJKyGfGAnZzcSNZdG5HnQAEJ8S6pV9gesOI0M88z1gPHslmVWQc+mNA//J6AESzmiAAhPiXVKvsD1hxGhnnmesB49ksyqyDn0xoH/5PQAiWc0QAEAU0NaTpAIACE+JdUq+wPWHEaGeeZ6wHj2SzKrIOfTGgf/k9ACJZzQAAAFED3fYVo=",
            Bytes::bytesToBase64($result->toBoc(false))
        );


        /// TEST 2 - "should build expected tx body when referralAddress is defined"
        $result = $this->swap->createSwapBody(
            askJettonWalletAddress: $askJettonWalletAddress,
            receiverAddress: $receiverAddress,
            refundAddress: $refundAddress,
            minAskAmount: $minAskAmount,
            referralAddress: new Address(USER_WALLET_ADDRESS)
        );
        $this->assertEquals(
            "te6cckEBAgEAuQAB0SWThWGAD+mcSkD3Vv8TNqd5ZpGULbUWJKyGfGAnZzcSNZdG5HnQAEJ8S6pV9gesOI0M88z1gPHslmVWQc+mNA//J6AESzmiAAhPiXVKvsD1hxGhnnmesB49ksyqyDn0xoH/5PQAiWc0QAEAlUNaTpAIACE+JdUq+wPWHEaGeeZ6wHj2SzKrIOfTGgf/k9ACJZzQAAAFQAEJ8S6pV9gesOI0M88z1gPHslmVWQc+mNA//J6AESzmiFTdty8=",
            Bytes::bytesToBase64($result->toBoc(false))
        );

        // TEST 3&4
        $this->expectException(\Exception::class);
        $result = $this->swap->createCrossSwapBody(
            $askJettonWalletAddress,
            $receiverAddress,
            $minAskAmount,
            $refundAddress,
            referralValue: BigInteger::of(200)
        );
        $this->expectException(\Exception::class);
        $result = $this->swap->createCrossSwapBody(
            $askJettonWalletAddress,
            $receiverAddress,
            $minAskAmount,
            $refundAddress,
            referralValue: BigInteger::of(-1)
        );
    }

    public function testJettonToJettonTxParams()
    {
        $userAddress = new Address(USER_WALLET_ADDRESS);
        $offerJettonAddress = new Address(OFFER_JETTON_ADDRESS);
        $askJettonAddress = new Address(ASK_JETTON_ADDRESS);
        $minAskAmount = BigInteger::of("200000000");
        $offerAmount = BigInteger::of("500000000");

        $this->swap = new SwapV2($this->init, new Address(ROUTER_ADDRESS), provider: $this->generateProviderMock());

        // TEST 1
        $res = $this->swap->JettonToJettonTxParams(
            userWalletAddress: $userAddress,
            offerJettonAddress: $offerJettonAddress,
            askJettonAddress: $askJettonAddress,
            offerAmount: $offerAmount,
            minAskAmount: $minAskAmount
        );
        $this->assertTrue($res->address->isEqual(new Address("EQBB_eiDQ9YJ_7UiNsrVvhTKt2O0oKjKe76eVQ7QPS-oYPsi")));
        $this->assertEquals(
            "te6cckEBAwEA8wABsA+KfqUAAAAAAAAAAEHc1lAIATVm1Pu/oiWS5n4OYpObhD24wfKWlrcZIcfQgKs/yR9hAAQnxLqlX2B6w4jQzzzPWA8eyWZVZBz6Y0D/8noARLOaCBycOAEBAdElk4VhgAEAzmDZI8Xr3NC7nZo+aFkM7M/0vb5/f2/1dAy3bDlFsABCfEuqVfYHrDiNDPPM9YDx7JZlVkHPpjQP/yegBEs5ogAIT4l1Sr7A9YcRoZ55nrAePZLMqsg59MaB/+T0AIlnNEACAFNAvrwgCAAhPiXVKvsD1hxGhnnmesB49ksyqyDn0xoH/5PQAiWc0AAABRAUtuiX",
            $res->payload
        );
        $this->assertEquals("300000000", $res->value);


        // TEST 2
        $res = $this->swap->JettonToJettonTxParams(
            userWalletAddress: $userAddress,
            offerJettonAddress: $offerJettonAddress,
            askJettonAddress: $askJettonAddress,
            offerAmount: $offerAmount,
            minAskAmount: $minAskAmount,
            referralAddress: $userAddress
        );
        $this->assertTrue($res->address->isEqual(new Address("EQBB_eiDQ9YJ_7UiNsrVvhTKt2O0oKjKe76eVQ7QPS-oYPsi")));
        $this->assertEquals(
            "te6cckECAwEAARQAAbAPin6lAAAAAAAAAABB3NZQCAE1ZtT7v6IlkuZ+DmKTm4Q9uMHylpa3GSHH0ICrP8kfYQAEJ8S6pV9gesOI0M88z1gPHslmVWQc+mNA//J6AESzmggcnDgBAQHRJZOFYYABAM5g2SPF69zQu52aPmhZDOzP9L2+f39v9XQMt2w5RbAAQnxLqlX2B6w4jQzzzPWA8eyWZVZBz6Y0D/8noARLOaIACE+JdUq+wPWHEaGeeZ6wHj2SzKrIOfTGgf/k9ACJZzRAAgCVQL68IAgAIT4l1Sr7A9YcRoZ55nrAePZLMqsg59MaB/+T0AIlnNAAAAVAAQnxLqlX2B6w4jQzzzPWA8eyWZVZBz6Y0D/8noARLOaIIYL3Ww==",
            $res->payload
        );
        $this->assertEquals("300000000", $res->value);


        // TEST 3
        $res = $this->swap->JettonToJettonTxParams(
            userWalletAddress: $userAddress,
            offerJettonAddress: $offerJettonAddress,
            askJettonAddress: $askJettonAddress,
            offerAmount: $offerAmount,
            minAskAmount: $minAskAmount,
            queryId: 12345
        );
        $this->assertTrue($res->address->isEqual(new Address("EQBB_eiDQ9YJ_7UiNsrVvhTKt2O0oKjKe76eVQ7QPS-oYPsi")));
        $this->assertEquals(
            "te6cckEBAwEA8wABsA+KfqUAAAAAAAAwOUHc1lAIATVm1Pu/oiWS5n4OYpObhD24wfKWlrcZIcfQgKs/yR9hAAQnxLqlX2B6w4jQzzzPWA8eyWZVZBz6Y0D/8noARLOaCBycOAEBAdElk4VhgAEAzmDZI8Xr3NC7nZo+aFkM7M/0vb5/f2/1dAy3bDlFsABCfEuqVfYHrDiNDPPM9YDx7JZlVkHPpjQP/yegBEs5ogAIT4l1Sr7A9YcRoZ55nrAePZLMqsg59MaB/+T0AIlnNEACAFNAvrwgCAAhPiXVKvsD1hxGhnnmesB49ksyqyDn0xoH/5PQAiWc0AAABRCIhhxc",
            $res->payload
        );
        $this->assertEquals("300000000", $res->value);


        // TEST 4
        $res = $this->swap->JettonToJettonTxParams(
            userWalletAddress: $userAddress,
            offerJettonAddress: $offerJettonAddress,
            askJettonAddress: $askJettonAddress,
            offerAmount: $offerAmount,
            minAskAmount: $minAskAmount,
            gasAmount: BigInteger::of(1)
        );
        $this->assertTrue($res->address->isEqual(new Address("EQBB_eiDQ9YJ_7UiNsrVvhTKt2O0oKjKe76eVQ7QPS-oYPsi")));
        $this->assertEquals("1", $res->value);


        // TEST 5
        $res = $this->swap->JettonToJettonTxParams(
            userWalletAddress: $userAddress,
            offerJettonAddress: $offerJettonAddress,
            askJettonAddress: $askJettonAddress,
            offerAmount: $offerAmount,
            minAskAmount: $minAskAmount,
            forwardGasAmount: BigInteger::of(1)
        );
        $this->assertTrue($res->address->isEqual(new Address("EQBB_eiDQ9YJ_7UiNsrVvhTKt2O0oKjKe76eVQ7QPS-oYPsi")));
        $this->assertEquals(
            "te6cckEBAwEA8AABqg+KfqUAAAAAAAAAAEHc1lAIATVm1Pu/oiWS5n4OYpObhD24wfKWlrcZIcfQgKs/yR9hAAQnxLqlX2B6w4jQzzzPWA8eyWZVZBz6Y0D/8noARLOaAgMBAdElk4VhgAEAzmDZI8Xr3NC7nZo+aFkM7M/0vb5/f2/1dAy3bDlFsABCfEuqVfYHrDiNDPPM9YDx7JZlVkHPpjQP/yegBEs5ogAIT4l1Sr7A9YcRoZ55nrAePZLMqsg59MaB/+T0AIlnNEACAFNAvrwgCAAhPiXVKvsD1hxGhnnmesB49ksyqyDn0xoH/5PQAiWc0AAABRCW13Q2",
            $res->payload
        );
        $this->assertEquals("300000000", $res->value);
    }

    public function testJettonToTonTxParams()
    {
        $this->setUp();

        $userAddress = new Address(USER_WALLET_ADDRESS);
        $offerJettonAddress = new Address(OFFER_JETTON_ADDRESS);
        $offerAmount = BigInteger::of("500000000");
        $minAskAmount = BigInteger::of("200000000");

        $this->swap = new SwapV2($this->init, provider: $this->generateProviderMock());

        // TEST 1
        $res = $this->swap->JettonToTonTxParams(
            $this->proxyTon,
            $userAddress,
            $offerJettonAddress,
            $offerAmount,
            $minAskAmount
        );
        $this->assertTrue($res->address->isEqual(new Address("EQBB_eiDQ9YJ_7UiNsrVvhTKt2O0oKjKe76eVQ7QPS-oYPsi")));
        $this->assertEquals(
            "te6cckEBAwEA8wABsA+KfqUAAAAAAAAAAEHc1lAIATVm1Pu/oiWS5n4OYpObhD24wfKWlrcZIcfQgKs/yR9hAAQnxLqlX2B6w4jQzzzPWA8eyWZVZBz6Y0D/8noARLOaCBycOAEBAdElk4VhgAIqFqMWTE1aoxM/MRD/EEluAMqKyKvv/FAn4CTTNIDD8ABCfEuqVfYHrDiNDPPM9YDx7JZlVkHPpjQP/yegBEs5ogAIT4l1Sr7A9YcRoZ55nrAePZLMqsg59MaB/+T0AIlnNEACAFNAvrwgCAAhPiXVKvsD1hxGhnnmesB49ksyqyDn0xoH/5PQAiWc0AAABRCu+7I2",
            $res->payload
        );
        $this->assertEquals("300000000", $res->value);


        // TEST 2
        $res = $this->swap->JettonToTonTxParams(
            $this->proxyTon,
            $userAddress,
            $offerJettonAddress,
            $offerAmount,
            $minAskAmount,
            referralAddress: $userAddress
        );
        $this->assertTrue($res->address->isEqual(new Address("EQBB_eiDQ9YJ_7UiNsrVvhTKt2O0oKjKe76eVQ7QPS-oYPsi")));
        $this->assertEquals(
            "te6cckECAwEAARQAAbAPin6lAAAAAAAAAABB3NZQCAE1ZtT7v6IlkuZ+DmKTm4Q9uMHylpa3GSHH0ICrP8kfYQAEJ8S6pV9gesOI0M88z1gPHslmVWQc+mNA//J6AESzmggcnDgBAQHRJZOFYYACKhajFkxNWqMTPzEQ/xBJbgDKisir7/xQJ+Ak0zSAw/AAQnxLqlX2B6w4jQzzzPWA8eyWZVZBz6Y0D/8noARLOaIACE+JdUq+wPWHEaGeeZ6wHj2SzKrIOfTGgf/k9ACJZzRAAgCVQL68IAgAIT4l1Sr7A9YcRoZ55nrAePZLMqsg59MaB/+T0AIlnNAAAAVAAQnxLqlX2B6w4jQzzzPWA8eyWZVZBz6Y0D/8noARLOaILksOvw==",
            $res->payload
        );
        $this->assertEquals("300000000", $res->value);


        // TEST 3
        $res = $this->swap->JettonToTonTxParams(
            $this->proxyTon,
            $userAddress,
            $offerJettonAddress,
            $offerAmount,
            $minAskAmount,
            queryId: 12345
        );
        $this->assertTrue($res->address->isEqual(new Address("EQBB_eiDQ9YJ_7UiNsrVvhTKt2O0oKjKe76eVQ7QPS-oYPsi")));
        $this->assertEquals(
            "te6cckEBAwEA8wABsA+KfqUAAAAAAAAwOUHc1lAIATVm1Pu/oiWS5n4OYpObhD24wfKWlrcZIcfQgKs/yR9hAAQnxLqlX2B6w4jQzzzPWA8eyWZVZBz6Y0D/8noARLOaCBycOAEBAdElk4VhgAIqFqMWTE1aoxM/MRD/EEluAMqKyKvv/FAn4CTTNIDD8ABCfEuqVfYHrDiNDPPM9YDx7JZlVkHPpjQP/yegBEs5ogAIT4l1Sr7A9YcRoZ55nrAePZLMqsg59MaB/+T0AIlnNEACAFNAvrwgCAAhPiXVKvsD1hxGhnnmesB49ksyqyDn0xoH/5PQAiWc0AAABRAyy0b9",
            $res->payload
        );
        $this->assertEquals("300000000", $res->value);


        // TEST 3
        $res = $this->swap->JettonToTonTxParams(
            $this->proxyTon,
            $userAddress,
            $offerJettonAddress,
            $offerAmount,
            $minAskAmount,
            gasAmount: BigInteger::of(1)
        );
        $this->assertTrue($res->address->isEqual(new Address("EQBB_eiDQ9YJ_7UiNsrVvhTKt2O0oKjKe76eVQ7QPS-oYPsi")));
        $this->assertEquals(
            "te6cckEBAwEA8wABsA+KfqUAAAAAAAAAAEHc1lAIATVm1Pu/oiWS5n4OYpObhD24wfKWlrcZIcfQgKs/yR9hAAQnxLqlX2B6w4jQzzzPWA8eyWZVZBz6Y0D/8noARLOaCBycOAEBAdElk4VhgAIqFqMWTE1aoxM/MRD/EEluAMqKyKvv/FAn4CTTNIDD8ABCfEuqVfYHrDiNDPPM9YDx7JZlVkHPpjQP/yegBEs5ogAIT4l1Sr7A9YcRoZ55nrAePZLMqsg59MaB/+T0AIlnNEACAFNAvrwgCAAhPiXVKvsD1hxGhnnmesB49ksyqyDn0xoH/5PQAiWc0AAABRCu+7I2",
            $res->payload
        );
        $this->assertEquals("1", $res->value);


        // TEST 4
        $res = $this->swap->JettonToTonTxParams(
            $this->proxyTon,
            $userAddress,
            $offerJettonAddress,
            $offerAmount,
            $minAskAmount,
            forwardGasAmount: BigInteger::of(1)
        );
        $this->assertTrue($res->address->isEqual(new Address("EQBB_eiDQ9YJ_7UiNsrVvhTKt2O0oKjKe76eVQ7QPS-oYPsi")));
        $this->assertEquals(
            "te6cckEBAwEA8AABqg+KfqUAAAAAAAAAAEHc1lAIATVm1Pu/oiWS5n4OYpObhD24wfKWlrcZIcfQgKs/yR9hAAQnxLqlX2B6w4jQzzzPWA8eyWZVZBz6Y0D/8noARLOaAgMBAdElk4VhgAIqFqMWTE1aoxM/MRD/EEluAMqKyKvv/FAn4CTTNIDD8ABCfEuqVfYHrDiNDPPM9YDx7JZlVkHPpjQP/yegBEs5ogAIT4l1Sr7A9YcRoZ55nrAePZLMqsg59MaB/+T0AIlnNEACAFNAvrwgCAAhPiXVKvsD1hxGhnnmesB49ksyqyDn0xoH/5PQAiWc0AAABRAsmi6X",
            $res->payload
        );
        $this->assertEquals("300000000", $res->value);
    }


    public function testTonToJettonTxParams()
    {
        $this->setUp();

        $userAddress = new Address(USER_WALLET_ADDRESS);
        $askJettonAddress = new Address(ASK_JETTON_ADDRESS);
        $offerAmount = BigInteger::of("500000000");
        $minAskAmount = BigInteger::of("200000000");

        $this->swap = new SwapV2($this->init, provider: $this->generateProviderMock());

        $this->proxyTon = new PtonV1($this->init, ('kQAcOvXSnnOhCdLYc6up2ECYwtNNTzlmOlidBeCs5cFPV7AM'), $this->generateProviderMock());

        // TEST 1
        $res = $this->swap->TonToJettonTxParams(
            $this->proxyTon,
            $userAddress,
            $askJettonAddress,
            $offerAmount,
            $minAskAmount
        );
        $this->assertTrue($res->address->isEqual(new Address("EQARULUYsmJq1RiZ-YiH-IJLcAZUVkVff-KBPwEmmaQGH6aC")));
        $this->assertEquals(
            "te6cckEBAwEA0gABbQ+KfqUAAAAAAAAAAEHc1lAIATVm1Pu/oiWS5n4OYpObhD24wfKWlrcZIcfQgKs/yR9gEEeGjAMBAdElk4VhgAEAzmDZI8Xr3NC7nZo+aFkM7M/0vb5/f2/1dAy3bDlFsABCfEuqVfYHrDiNDPPM9YDx7JZlVkHPpjQP/yegBEs5ogAIT4l1Sr7A9YcRoZ55nrAePZLMqsg59MaB/+T0AIlnNEACAFNAvrwgCAAhPiXVKvsD1hxGhnnmesB49ksyqyDn0xoH/5PQAiWc0AAABRCBvyRh",
            $res->payload
        );
        $this->assertEquals("800000000", $res->value);


        // TEST 2
        $res = $this->swap->TonToJettonTxParams(
            $this->proxyTon,
            $userAddress,
            $askJettonAddress,
            $offerAmount,
            $minAskAmount,
            referralAddress: $userAddress
        );
        $this->assertTrue($res->address->isEqual(new Address("EQARULUYsmJq1RiZ-YiH-IJLcAZUVkVff-KBPwEmmaQGH6aC")));
        $this->assertEquals(
            "te6cckEBAwEA8wABbQ+KfqUAAAAAAAAAAEHc1lAIATVm1Pu/oiWS5n4OYpObhD24wfKWlrcZIcfQgKs/yR9gEEeGjAMBAdElk4VhgAEAzmDZI8Xr3NC7nZo+aFkM7M/0vb5/f2/1dAy3bDlFsABCfEuqVfYHrDiNDPPM9YDx7JZlVkHPpjQP/yegBEs5ogAIT4l1Sr7A9YcRoZ55nrAePZLMqsg59MaB/+T0AIlnNEACAJVAvrwgCAAhPiXVKvsD1hxGhnnmesB49ksyqyDn0xoH/5PQAiWc0AAABUABCfEuqVfYHrDiNDPPM9YDx7JZlVkHPpjQP/yegBEs5ohhq/lA",
            $res->payload
        );
        $this->assertEquals("800000000", $res->value);


        // TEST 3
        $res = $this->swap->TonToJettonTxParams(
            $this->proxyTon,
            $userAddress,
            $askJettonAddress,
            $offerAmount,
            $minAskAmount,
            queryId: 12345
        );
        $this->assertTrue($res->address->isEqual(new Address("EQARULUYsmJq1RiZ-YiH-IJLcAZUVkVff-KBPwEmmaQGH6aC")));
        $this->assertEquals(
            "te6cckEBAwEA0gABbQ+KfqUAAAAAAAAwOUHc1lAIATVm1Pu/oiWS5n4OYpObhD24wfKWlrcZIcfQgKs/yR9gEEeGjAMBAdElk4VhgAEAzmDZI8Xr3NC7nZo+aFkM7M/0vb5/f2/1dAy3bDlFsABCfEuqVfYHrDiNDPPM9YDx7JZlVkHPpjQP/yegBEs5ogAIT4l1Sr7A9YcRoZ55nrAePZLMqsg59MaB/+T0AIlnNEACAFNAvrwgCAAhPiXVKvsD1hxGhnnmesB49ksyqyDn0xoH/5PQAiWc0AAABRDeQKI6",
            $res->payload
        );
        $this->assertEquals("800000000", $res->value);


        // TEST 3
        $res = $this->swap->TonToJettonTxParams(
            $this->proxyTon,
            $userAddress,
            $askJettonAddress,
            $offerAmount,
            $minAskAmount,
        );
        $this->assertTrue($res->address->isEqual(new Address("EQARULUYsmJq1RiZ-YiH-IJLcAZUVkVff-KBPwEmmaQGH6aC")));
        $this->assertEquals(
            "te6cckEBAwEA0gABbQ+KfqUAAAAAAAAAAEHc1lAIATVm1Pu/oiWS5n4OYpObhD24wfKWlrcZIcfQgKs/yR9gEEeGjAMBAdElk4VhgAEAzmDZI8Xr3NC7nZo+aFkM7M/0vb5/f2/1dAy3bDlFsABCfEuqVfYHrDiNDPPM9YDx7JZlVkHPpjQP/yegBEs5ogAIT4l1Sr7A9YcRoZ55nrAePZLMqsg59MaB/+T0AIlnNEACAFNAvrwgCAAhPiXVKvsD1hxGhnnmesB49ksyqyDn0xoH/5PQAiWc0AAABRCBvyRh",
            $res->payload
        );
        $this->assertEquals("800000000", $res->value);


        // TEST 4
        $res = $this->swap->TonToJettonTxParams(
            $this->proxyTon,
            $userAddress,
            $askJettonAddress,
            $offerAmount,
            $minAskAmount,
            forwardGasAmount: BigInteger::of(1)
        );
        $this->assertTrue($res->address->isEqual(new Address("EQARULUYsmJq1RiZ-YiH-IJLcAZUVkVff-KBPwEmmaQGH6aC")));
        $this->assertEquals(
            "te6cckEBAwEAzwABZw+KfqUAAAAAAAAAAEHc1lAIATVm1Pu/oiWS5n4OYpObhD24wfKWlrcZIcfQgKs/yR9gBAcBAdElk4VhgAEAzmDZI8Xr3NC7nZo+aFkM7M/0vb5/f2/1dAy3bDlFsABCfEuqVfYHrDiNDPPM9YDx7JZlVkHPpjQP/yegBEs5ogAIT4l1Sr7A9YcRoZ55nrAePZLMqsg59MaB/+T0AIlnNEACAFNAvrwgCAAhPiXVKvsD1hxGhnnmesB49ksyqyDn0xoH/5PQAiWc0AAABRCrRggS",
            $res->payload
        );
        $this->assertEquals("500000001", $res->value);
    }
}
