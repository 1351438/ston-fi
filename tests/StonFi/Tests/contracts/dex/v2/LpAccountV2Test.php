<?php

namespace StonFi\Tests\contracts\dex\v2;

use Brick\Math\BigInteger;
use Olifanton\Interop\Address;
use Olifanton\Interop\Bytes;
use StonFi\const\v2\gas\lp_account\DirectAddLpGas;
use StonFi\const\v2\gas\lp_account\RefundGas;
use StonFi\const\v2\gas\lp_account\ResetGas;
use StonFi\const\v2\models\LpAccountData;
use StonFi\contracts\common\CallContractMethods;
use StonFi\contracts\dex\v2\LpAccountV2;
use PHPUnit\Framework\TestCase;
use StonFi\contracts\dex\v2\PoolV2;
use StonFi\enums\Networks;
use StonFi\Init;

const LP_ACCOUNT_ADDRESS = "EQD9KyZJ3cwbaDphNjXa_nJvxApEUJOvFGZrcbDTuke6Fs7B"; // LP account of `UQAQnxLqlX2B6w4jQzzzPWA8eyWZVZBz6Y0D_8noARLOaEAn` wallet for STON/GEMSTON pool
const USER_WALLET_ADDRESS = "UQAQnxLqlX2B6w4jQzzzPWA8eyWZVZBz6Y0D_8noARLOaEAn";

class LpAccountV2Test extends TestCase
{

    public Init $init;
    public LpAccountV2 $lpAccount;

    protected function setUp(): void
    {
        $this->init = new Init(Networks::MAINNET);
        $this->lpAccount = new LpAccountV2($this->init, new Address(LP_ACCOUNT_ADDRESS));
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function testGas()
    {
        $this->assertEquals("300000000", (new DirectAddLpGas())->gasAmount);
        $this->assertEquals("800000000", (new RefundGas())->gasAmount);
        $this->assertEquals("200000000", (new ResetGas())->gasAmount);
    }

    public function testCreateRefundBody()
    {
        // TEST 1
        $body = $this->lpAccount->createRefundBody();
        $this->assertEquals("te6cckEBAQEADwAAGQvz9EcAAAAAAAAAACCVqe6q", Bytes::bytesToBase64($body->toBoc(false)));


        // TEST 2
        $body = $this->lpAccount->createRefundBody(queryId: 12345);
        $this->assertEquals("te6cckEBAQEADwAAGQvz9EcAAAAAAAAwOSBHZvD1", Bytes::bytesToBase64($body->toBoc(false)));
    }

    public function testGetRefundTxParams()
    {
        // TEST 1 - should build expected tx params
        $result = $this->lpAccount->getRefundTxParams();
        $this->assertTrue($result->address->isEqual(new Address(LP_ACCOUNT_ADDRESS)));
        $this->assertEquals("te6cckEBAQEADwAAGQvz9EcAAAAAAAAAACCVqe6q", $result->payload);
        $this->assertEquals((new RefundGas())->gasAmount, $result->value);


        // TEST 2 - should build expected tx params when queryId is defined
        $result = $this->lpAccount->getRefundTxParams(queryId: 12345);
        $this->assertTrue($result->address->isEqual(new Address(LP_ACCOUNT_ADDRESS)));
        $this->assertEquals("te6cckEBAQEADwAAGQvz9EcAAAAAAAAwOSBHZvD1", $result->payload);
        $this->assertEquals((new RefundGas())->gasAmount, $result->value);


        // TEST 3 - should build expected tx params when custom gasAmount is defined
        $result = $this->lpAccount->getRefundTxParams(gasAmount: BigInteger::of(1));
        $this->assertTrue($result->address->isEqual(new Address(LP_ACCOUNT_ADDRESS)));
        $this->assertEquals("te6cckEBAQEADwAAGQvz9EcAAAAAAAAAACCVqe6q", $result->payload);
        $this->assertEquals(BigInteger::of(1), $result->value);
    }

    public function testCreateDirectAddLiquidityBody()
    {
        $userWalletAddress = new Address(USER_WALLET_ADDRESS);
        $amount0 = BigInteger::of("1000000000");
        $amount1 = BigInteger::of("2000000000");

        // TEST 1
        $body = $this->lpAccount->createDirectAddLiquidityBody($amount0, $amount1, $userWalletAddress);

        $this->assertEquals(
            "te6cckEBAgEAgQABcUz4KAMAAAAAAAAAAEO5rKAEdzWUABAQgAIT4l1Sr7A9YcRoZ55nrAePZLMqsg59MaB/+T0AIlnNCAEAhYACE+JdUq+wPWHEaGeeZ6wHj2SzKrIOfTGgf/k9ACJZzRAAQnxLqlX2B6w4jQzzzPWA8eyWZVZBz6Y0D/8noARLOaJUKwEU",
            Bytes::bytesToBase64($body->toBoc(false))
        );


        // TEST 2
        $body = $this->lpAccount->createDirectAddLiquidityBody($amount0, $amount1, $userWalletAddress, queryId: 12345);

        $this->assertEquals(
            "te6cckEBAgEAgQABcUz4KAMAAAAAAAAwOUO5rKAEdzWUABAQgAIT4l1Sr7A9YcRoZ55nrAePZLMqsg59MaB/+T0AIlnNCAEAhYACE+JdUq+wPWHEaGeeZ6wHj2SzKrIOfTGgf/k9ACJZzRAAQnxLqlX2B6w4jQzzzPWA8eyWZVZBz6Y0D/8noARLOaI6Vjui",
            Bytes::bytesToBase64($body->toBoc(false))
        );

        // TEST 3
        $body = $this->lpAccount->createDirectAddLiquidityBody($amount0, $amount1, $userWalletAddress, minimumLpToMint: BigInteger::of(300));

        $this->assertEquals(
            "te6cckEBAgEAggABc0z4KAMAAAAAAAAAAEO5rKAEdzWUACASwIACE+JdUq+wPWHEaGeeZ6wHj2SzKrIOfTGgf/k9ACJZzQgBAIWAAhPiXVKvsD1hxGhnnmesB49ksyqyDn0xoH/5PQAiWc0QAEJ8S6pV9gesOI0M88z1gPHslmVWQc+mNA//J6AESzmiXyA3Mw==",
            Bytes::bytesToBase64($body->toBoc(false))
        );
    }

    public function testGetDirectAddLiquidityTxParams()
    {
        $userWalletAddress = new Address(USER_WALLET_ADDRESS);
        $amount0 = BigInteger::of("1");
        $amount1 = BigInteger::of("2");

        // TEST 1
        $result = $this->lpAccount->getDirectAddLiquidityTxParams($userWalletAddress,$amount0, $amount1);
        $this->assertTrue($result->address->isEqual(new Address(LP_ACCOUNT_ADDRESS)));
        $this->assertEquals("te6cckEBAgEAewABZUz4KAMAAAAAAAAAABARAhAQgAIT4l1Sr7A9YcRoZ55nrAePZLMqsg59MaB/+T0AIlnNCAEAhYACE+JdUq+wPWHEaGeeZ6wHj2SzKrIOfTGgf/k9ACJZzRAAQnxLqlX2B6w4jQzzzPWA8eyWZVZBz6Y0D/8noARLOaIG6kbG", $result->payload);
        $this->assertEquals((new DirectAddLpGas())->gasAmount, $result->value);


        // TEST 2
        $result = $this->lpAccount->getDirectAddLiquidityTxParams($userWalletAddress, $amount0, $amount1, queryId: 12345);
        $this->assertTrue($result->address->isEqual(new Address(LP_ACCOUNT_ADDRESS)));
        $this->assertEquals("te6cckEBAgEAewABZUz4KAMAAAAAAAAwORARAhAQgAIT4l1Sr7A9YcRoZ55nrAePZLMqsg59MaB/+T0AIlnNCAEAhYACE+JdUq+wPWHEaGeeZ6wHj2SzKrIOfTGgf/k9ACJZzRAAQnxLqlX2B6w4jQzzzPWA8eyWZVZBz6Y0D/8noARLOaIeyYa1", $result->payload);
        $this->assertEquals((new DirectAddLpGas())->gasAmount, $result->value);

        // TEST 3
        $result = $this->lpAccount->getDirectAddLiquidityTxParams($userWalletAddress, $amount0, $amount1, minimumLpToMint: BigInteger::of(3));
        $this->assertTrue($result->address->isEqual(new Address(LP_ACCOUNT_ADDRESS)));
        $this->assertEquals("te6cckEBAgEAewABZUz4KAMAAAAAAAAAABARAhAwgAIT4l1Sr7A9YcRoZ55nrAePZLMqsg59MaB/+T0AIlnNCAEAhYACE+JdUq+wPWHEaGeeZ6wHj2SzKrIOfTGgf/k9ACJZzRAAQnxLqlX2B6w4jQzzzPWA8eyWZVZBz6Y0D/8noARLOaJ+Mo0t", $result->payload);
        $this->assertEquals((new DirectAddLpGas())->gasAmount, $result->value);


        // TEST 4
        $result = $this->lpAccount->getDirectAddLiquidityTxParams($userWalletAddress, $amount0, $amount1, gasAmount: BigInteger::of(1));
        $this->assertTrue($result->address->isEqual(new Address(LP_ACCOUNT_ADDRESS)));
        $this->assertEquals("te6cckEBAgEAewABZUz4KAMAAAAAAAAAABARAhAQgAIT4l1Sr7A9YcRoZ55nrAePZLMqsg59MaB/+T0AIlnNCAEAhYACE+JdUq+wPWHEaGeeZ6wHj2SzKrIOfTGgf/k9ACJZzRAAQnxLqlX2B6w4jQzzzPWA8eyWZVZBz6Y0D/8noARLOaIG6kbG", $result->payload);
        $this->assertEquals("1", $result->value);
    }

    public function testCreateResetGasBody()
    {
        // TEST 1
        $body = $this->lpAccount->createResetGasBody();
        $this->assertEquals(
            "te6cckEBAQEADgAAGEKg+0MAAAAAAAAAAPc9hrQ=",
            Bytes::bytesToBase64($body->toBoc(false))
        );

        // TEST 2
        $body = $this->lpAccount->createResetGasBody(queryId: 12345);
        $this->assertEquals(
            "te6cckEBAQEADgAAGEKg+0MAAAAAAAAwOQm9mbw=",
            Bytes::bytesToBase64($body->toBoc(false))
        );
    }

    public function testGetResetGasTxParams()
    {
        // TEST 1
        $result = $this->lpAccount->getResetGasTxParams();
        $this->assertTrue($result->address->isEqual(new Address(LP_ACCOUNT_ADDRESS)));
        $this->assertEquals("te6cckEBAQEADgAAGEKg+0MAAAAAAAAAAPc9hrQ=", $result->payload);
        $this->assertEquals((new ResetGas())->gasAmount, $result->value);


        // TEST 2
        $result = $this->lpAccount->getResetGasTxParams(queryId: 12345);
        $this->assertTrue($result->address->isEqual(new Address(LP_ACCOUNT_ADDRESS)));
        $this->assertEquals("te6cckEBAQEADgAAGEKg+0MAAAAAAAAwOQm9mbw=", $result->payload);
        $this->assertEquals((new ResetGas())->gasAmount, $result->value);
    }

    public function testGetLpAccountData()
    {
        $mock = $this->createMock(CallContractMethods::class);
        $mock->expects($this->any())
            ->method("runMethod")
            ->willReturnCallback(function ($contractAddress, $method, $arg2) {
                return json_encode([
                    'success' => true,
                    'stack' => [
                        [
                            'type' => 'slice',
                            'slice' => Bytes::bytesToHexString(Bytes::base64ToBytes("te6ccsEBAQEAJAAAAEOAAhPiXVKvsD1hxGhnnmesB49ksyqyDn0xoH/5PQAiWc0QY+4g6g=="))
                        ],
                        [
                            'type' => 'slice',
                            'slice' => Bytes::bytesToHexString(Bytes::base64ToBytes("te6cckEBAQEAJAAAQ4AcWjZMMl4PnV4hXc0bTXOnmOCQPE08nma5bszegFth3FBjJd6+"))
                        ],
                        [
                            'type' => 'num',
                            'num' => dechex(0)
                        ],
                        [
                            'type' => 'num',
                            'num' => dechex(0)
                        ],
                    ]
                ]);
            });

        $this->lpAccount = new LpAccountV2($this->init, new Address(LP_ACCOUNT_ADDRESS), provider: $mock);

        $result = $this->lpAccount->getLpAccountData();
        $this->assertTrue($result->userAddress->isEqual(new Address("EQAQnxLqlX2B6w4jQzzzPWA8eyWZVZBz6Y0D_8noARLOaB3i")));
        $this->assertTrue($result->poolAddress->isEqual(new Address("EQDi0bJhkvB86vEK7mjaa508xwSB4mnk8zXLdmb0AtsO4iG7")));
        $this->assertEquals("0", $result->amount0);
        $this->assertEquals("0", $result->amount1);

    }
}
